<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;

use Filament\Models\Contracts\FilamentUser;
use Filament\Panel;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable implements FilamentUser
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'Title',
        'name',
        'password',
        'HairID',
        'Access',
        'ActivationFlag',
        'PermamuteFlag',
        'Country',
        'Age',
        'Gender',
        'email',
        'remember_token',
        'Level',
        'Gold',
        'Coins',
        'Crystal',
        'Exp',
        'ColorUsername',
        'ColorChat',
        'ColorHair',
        'ColorSkin',
        'Coloreye',
        'ColorBase',
        'ColorTrim',
        'ColorAccessory',
        'SlotsAuction',
        'SlotsBag',
        'SlotsBank',
        'SlotsHouse',
        'DateCreated',
        'LastLogin',
        'CpBoostExpire',
        'RepBoostExpire',
        'GoldBoostExpire',
        'ExpBoostExpire',
        'UpgradeExpire',
        'UpgradeDays',
        'Upgraded',
        'BattlePass',
        'Achievement',
        'Settings',
        'Quests',
        'Quests1',
        'Quests2',
        'Quests3',
        'Quests4',
        'Quests5',
        'Quests6',
        'DailyAds',
        'DailyQuests0',
        'DailyQuests1',
        'DailyQuests2',
        'MonthlyQuests0',
        'LastArea',
        'CurrentServer',
        'HouseInfo',
        'KillCount',
        'DeathCount',
        'RegisterAddress',
        'SocketAddress',
        'WebAddress',
        'Rebirth',
        'PlayTime',
        'Market',
        'Token',
        'Avatar'
    ];

    const CREATED_AT = 'DateCreated';
    const UPDATED_AT = 'LastLogin';

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }

    public function canAccessPanel(Panel $panel): bool
    {
        return ($this->Access >= 40);
    }

    public function isAdmin(): bool
    {
        return ($this->Access >= 60);
    }

    public function isOwner(): bool
    {
        return ($this->Access >= 100);
    }

    public function getGeneratedPhotoAttribute()
    {
        return $this->Avatar != null ? asset("assets/account/{$this->id}/displays/{$this->Avatar}") : asset('/images/display/Artix.jpg');
    }

    /**
     * @return \App\Models\Hair
     */
    public function Hair()
    {
        return $this->hasOne(Hair::class, 'id', 'HairID');
    }

    /**
     * @return \App\Models\UserItem
     */
    public function inventory()
    {
        return $this->hasManyThrough(
            Item::class,
            UserItem::class,
            'UserID',
            'id',
            'id',
            'ItemID'
        )->select(
            'items.id',
            'items.Name',
            'items.Description',
            'items.File',
            'items.Link',
            'items.Type',
            'items.Equipment',
            'items.Rarity',
            'items.Upgrade',
            'users_items.ItemID',
            'users_items.Equipped',
            'users_items.Bank',
            'users_items.Quantity',
        )
        ->OrderBy('items.Type', 'DESC')
        ->where('users_items.Bank', 0);
    }
}
